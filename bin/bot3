#!/usr/bin/env bash

source bot-funcs.sh

usage() {
    echo "Usage: ${0##*/} [options]"
    echo
    echo "  Options:"
    echo "    -h, --help         - this help"
    echo "    -i, --interactive  - ask before starting each route cycle [def:off]"
    echo "    -q, --quiet        - don't display status updates         [def:off]"
    echo
}

# Script flags, set to defaults
interactive=false
quiet=false

# Parse command line arguments
while (( "$#" )); do
    if [[ "$1" == "-i" ]]; then
        interactive=true
        shift
    fi

    if [[ "$1" == "--interactive" ]]; then
        interactive=true
        shift
    fi

    if [[ "$1" == "-h" ]]; then
        usage
        exit 0
    fi

    if [[ "$1" == "--help" ]]; then
        usage
        exit 0
    fi

    if [[ "$1" == "-q" ]]; then
        quiet=true
        shift
    fi

    if [[ "$1" == "--quiet" ]]; then
        quiet=true
        shift
    fi
done

# Display menu allowing user to select current (starting) planet
get_current_planet() {
    PS3="Select your current location: "
    options=($AG_PLANET_NAME $IND_PLANET_NAME "Quit")
    select opt in "${options[@]}"
    do
        case $opt in
            $AG_PLANET_NAME)
                currPlanet="ag"
                currPlanetName=$AG_PLANET_NAME
                break
                ;;
            $IND_PLANET_NAME)
                currPlanet="ind"
                currPlanetName=$IND_PLANET_NAME
                break
                ;;
            "Quit")
                currPlanet="quit"
                break
                ;;
            *)
                echo "Invalid choice"
                ;;
        esac
    done

    if [[ "$currPlanet" == "quit" ]]; then
        echo "Goodbye."
        exit 0
    fi
}

#
# Toggle the nextPlanet vars based on the currPlanet
#
set_next_planet() {
    if [[ "$currPlanet" == "ag" ]]; then
        nextPlanet="ind"
        nextPlanetName=$IND_PLANET_NAME
    else
        nextPlanet="ag"
        nextPlanetName=$AG_PLANET_NAME
    fi
}

#
# Toggle the currPlanet with the nextPlanet
#
update_current_planet() {
    currPlanet=$nextPlanet
    if [[ "$currPlanet" == "ag" ]]; then
        currPlanetName=$AG_PLANET_NAME
    else
        currPlanetName=$IND_PLANET_NAME
    fi

    set_next_planet
}

#
# Display a status message to the user (unless --quiet option is true)
#
# Args:
#   message to display
#
display_status() {
    if [[ "$quiet" == false ]]; then
        echo $1
    fi
}

#
# Main trading route
#
function run_route() {
    buy_cargo $nextPlanet
    mark_next_planet $nextPlanet
    quick_save

    if [[ "$interactive" == "true" ]]; then
        echo "Ready to launch for $nextPlanetName"
        pause_shell "Press [Enter] when you're ready"
    fi

    launch
    display_status "Beginning route to $nextPlanetName"
    pitch_down 1.5
    fire_injectors 8
    enter_hyper
    pitch_down 1.5
    fire_injectors 40
    jump
    wait_for 15
    pitch_up 1.6

    display_status "Navigating to ${nextPlanetName}..."
    navigate_to_station

    update_current_planet
    display_status "Docked at $currPlanetName"
    sell_cargo $currPlanet
    refuel
}

#
# Buy cargo appropriate for the destination planet
#
# Args:
#   planet type: [ag | ind]
#
buy_cargo() {
    if [[ "$1" == "ag" ]]; then
        buy_computers
        buy_luxuries
        buy_machinery
        buy_alloys
    else
        buy_furs
        buy_liquor
        buy_radioactives
        buy_platinum
        buy_textiles
        buy_minerals
        buy_food
    fi
}

#
# Sell cargo appropriate for the current planet
#
# Args:
#   planet type: [ag | ind]
#
sell_cargo() {
    get_current_cargo_state

    if [[ "$1" == "ag" ]]; then
        sell_computers
        sell_luxuries
        sell_machinery
        sell_alloys
    else
        sell_furs
        sell_liquor
        sell_radioactives
        sell_platinum
        sell_textiles
        sell_minerals
        sell_food
    fi
}

#
# Mark the next planet on the nav chart (for hyperspace)
#
# Args:
#   planet type: [ag | ind]
#
mark_next_planet() {
    if [[ "$1" == "ag" ]]; then
        mark_ag
    else
        mark_ind
    fi
}

# Find and initialize our game window
init_oolite_window

echo
echo "Oolite Merchant Bot"
echo

get_current_planet
set_next_planet

echo
echo "Before starting, you should have empty cargo holds,"
echo "and have enough fuel to get to $nextPlanetName"
echo
echo "Use Ctrl-c to exit"
echo

pause_shell "Press [Enter] when you're ready"

# Before we start,
store_empty_cargo_state


while true
do
    run_route
done

